# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = True

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://drive.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, '*://*.www.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications', True, 'https://www.facebook.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications', True, 'https://www.gmail.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications', True, 'https://www.instagram.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications', True, 'https://www.reddit.com')

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', True, 'https://mail.google.com?extsrc=mailto&url=%25s')

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://www.google.com'

# Search engines which can be used via the address bar.  Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` braces.  The following further
# placeholds are defined to configure how special characters in the
# search terms are replaced by safe characters (called 'quoting'):  *
# `{}` and `{semiquoted}` quote everything except slashes; this is the
# most   sensible choice for almost all search engines (for the search
# term   `slash/and&amp` this placeholder expands to `slash/and%26amp`).
# * `{quoted}` quotes all characters (for `slash/and&amp` this
# placeholder   expands to `slash%2Fand%26amp`). * `{unquoted}` quotes
# nothing (for `slash/and&amp` this placeholder   expands to
# `slash/and&amp`).  The search engine named `DEFAULT` is used when
# `url.auto_search` is turned on and something else than a URL was
# entered to be opened. Other search engines can be used by prepending
# the search engine name to the search term, e.g. `:open google
# qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://www.google.com/search?hl=en&q={}', 'yt': 'https://www.youtube.com/results?search_query={}', 'd': 'https://duckduckgo.com/?q={}', 'aws': 'https://wiki.archlinux.org/?search={}', 'ghu': 'https://github.com/{}', 'ghs': 'https://github.com/search?q={}', 'rss': 'https://doc.rust-lang.org/std/index.html?search={}', 'rd': 'https://www.reddit.com/search/?q={}', 'rdr': 'https://www.reddit.com/r/{}/', 'rdu': 'https://www.reddit.com/u/{}/', 'cio': 'https://crates.io/search?q={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://www.google.com'

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = '#a3c7bd'

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#0F1319'

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = '#0F1319'

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = '#a3c7bd'

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = '#0F1319'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = '#0F1319'

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = '#0F1319'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = '#a3c7bd'

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = '#DC9354'

# Top border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.top = '#0F1319'

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = '#0F1319'

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = '#A1594E'

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = '#a3c7bd'

# Color of the scrollbar in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.bg = '#0F1319'

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = '#0F1319'

# Color gradient stop for download backgrounds.
# Type: QtColor
c.colors.downloads.stop.bg = '#C19E6C'

# Color gradient interpolation system for download backgrounds.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.downloads.system.bg = 'none'

# Foreground color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.fg = '#a3c7bd'

# Background color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.bg = '#DC9354'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = '#0F1319'

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = '#A1594E'

# Font color for the matched part of hints.
# Type: QtColor
c.colors.hints.match.fg = '#C96C45'

# Text color for the keyhint widget.
# Type: QssColor
c.colors.keyhint.fg = '#a3c7bd'

# Highlight color for keys to complete the current keychain.
# Type: QssColor
c.colors.keyhint.suffix.fg = '#A1594E'

# Background color of the keyhint widget.
# Type: QssColor
c.colors.keyhint.bg = '#0F1319'

# Foreground color of an error message.
# Type: QssColor
c.colors.messages.error.fg = '#a3c7bd'

# Background color of an error message.
# Type: QssColor
c.colors.messages.error.bg = '#DC9354'

# Border color of an error message.
# Type: QssColor
c.colors.messages.error.border = '#DC9354'

# Foreground color of a warning message.
# Type: QssColor
c.colors.messages.warning.fg = '#a3c7bd'

# Background color of a warning message.
# Type: QssColor
c.colors.messages.warning.bg = '#B04B34'

# Border color of a warning message.
# Type: QssColor
c.colors.messages.warning.border = '#B04B34'

# Foreground color of an info message.
# Type: QssColor
c.colors.messages.info.fg = '#a3c7bd'

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = '#C96C45'

# Border color of an info message.
# Type: QssColor
c.colors.messages.info.border = '#C96C45'

# Foreground color for prompts.
# Type: QssColor
c.colors.prompts.fg = '#a3c7bd'

# Border used around UI elements in prompts.
# Type: String
c.colors.prompts.border = '1px solid #0F1319'

# Background color for prompts.
# Type: QssColor
c.colors.prompts.bg = '#0F1319'

# Background color for the selected item in filename prompts.
# Type: QssColor
c.colors.prompts.selected.bg = '#DC9354'

# Foreground color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.fg = '#a3c7bd'

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = '#0F1319'

# Foreground color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.fg = '#0F1319'

# Background color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.bg = '#CE6537'

# Foreground color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.fg = '#a3c7bd'

# Background color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.bg = '#C96C45'

# Foreground color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.fg = '#a3c7bd'

# Background color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.bg = '#0F1319'

# Foreground color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.fg = '#a3c7bd'

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = '#0F1319'

# Foreground color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.fg = '#a3c7bd'

# Background color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.bg = '#0F1319'

# Foreground color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.fg = '#a3c7bd'

# Background color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.bg = '#C19E6C'

# Foreground color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.fg = '#a3c7bd'

# Background color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.bg = '#C19E6C'

# Background color of the progress bar.
# Type: QssColor
c.colors.statusbar.progress.bg = '#a3c7bd'

# Default foreground color of the URL in the statusbar.
# Type: QssColor
c.colors.statusbar.url.fg = '#a3c7bd'

# Foreground color of the URL in the statusbar on error.
# Type: QssColor
c.colors.statusbar.url.error.fg = '#DC9354'

# Foreground color of the URL in the statusbar for hovered links.
# Type: QssColor
c.colors.statusbar.url.hover.fg = '#C96C45'

# Foreground color of the URL in the statusbar on successful load
# (http).
# Type: QssColor
c.colors.statusbar.url.success.http.fg = '#a3c7bd'

# Foreground color of the URL in the statusbar on successful load
# (https).
# Type: QssColor
c.colors.statusbar.url.success.https.fg = '#CE6537'

# Foreground color of the URL in the statusbar when there's a warning.
# Type: QssColor
c.colors.statusbar.url.warn.fg = '#B04B34'

# Background color of the tab bar.
# Type: QssColor
c.colors.tabs.bar.bg = '#0F1319'

# Color for the tab indicator on errors.
# Type: QtColor
c.colors.tabs.indicator.error = '#DC9354'

# Color gradient interpolation system for the tab indicator.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.tabs.indicator.system = 'none'

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = '#a3c7bd'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#0F1319'

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = '#a3c7bd'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#0F1319'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = '#a3c7bd'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = '#C96C45'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = '#a3c7bd'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = '#C96C45'

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = 'white'

# This setting can be used to map keys to other keys. When the key used
# as dictionary-key is pressed, the binding for the key used as
# dictionary-value is invoked instead. This is useful for global
# remappings of keys, for example to map Ctrl-[ to Escape. Note that
# when a key is bound (via `bindings.default` or `bindings.commands`),
# the mapping is ignored.
# Type: Dict
c.bindings.key_mappings = {'<Shift+Α>': 'A', '<Α>': 'a', '<Shift+Β>': 'B', '<Β>': 'b', '<Shift+Γ>': 'G', '<Γ>': 'g', '<Shift+Δ>': 'D', '<Δ>': 'd', '<Shift+Ε>': 'E', '<Ε>': 'e', '<Shift+Ζ>': 'Z', '<Ζ>': 'z', '<Shift+Η>': 'H', '<Η>': 'h', '<Shift+Θ>': 'U', '<Θ>': 'u', '<Shift+Ι>': 'I', '<Ι>': 'i', '<Shift+Κ>': 'K', '<Κ>': 'k', '<Shift+Λ>': 'L', '<Λ>': 'l', '<Shift+Μ>': 'M', '<Μ>': 'm', '<Shift+Ν>': 'N', '<Ν>': 'n', '<Shift+Ξ>': 'J', '<Ξ>': 'j', '<Shift+Ο>': 'O', '<Ο>': 'o', '<Shift+Π>': 'P', '<Π>': 'p', '<Shift+Ρ>': 'R', '<Ρ>': 'r', '<Shift+Σ>': 'S', '<Σ>': 'w', '<Shift+Τ>': 'T', '<Τ>': 't', '<Shift+Υ>': 'Y', '<Υ>': 'y', '<Shift+Φ>': 'F', '<Φ>': 'f', '<Shift+Χ>': 'X', '<Χ>': 'x', '<Shift+Ψ>': 'C', '<Ψ>': 'c', '<Shift+Ω>': 'V', '<Ω>': 'v', '<᾽>': ';'}

# Bindings for normal mode
config.bind('<Ctrl+Shift+d>', "hint links spawn --detach youtube-dl -o '~/Videos/%(title)s.%(ext)s' {hint-url}")
config.bind('<Ctrl+Shift+y>', 'hint links spawn --detach mpv --force-window yes {hint-url}')
config.bind('Sq', 'open qute://bookmarks')
config.bind('Ss', 'open qute://settings')
config.bind('T', 'tab-focus')
config.bind('V', 'enter-mode caret ;; toggle-selection --line')
config.bind('ZQ', 'quit')
config.bind('ZZ', 'quit --save')
config.bind('[[', 'navigate prev')
config.bind(']]', 'navigate next')
config.bind('`', 'enter-mode set_mark')
config.bind('ad', 'download-cancel')
config.bind('b', 'set-cmd-text -s :quickmark-load')
config.bind('cd', 'download-clear')
config.bind('co', 'tab-only')
config.bind('d', 'tab-close')
config.bind('f', 'hint')
config.bind('g$', 'tab-focus -1')
config.bind('g0', 'tab-focus 1')
config.bind('gB', 'set-cmd-text -s :bookmark-load -t')
config.bind('gC', 'tab-clone')
config.bind('gD', 'tab-give')
config.bind('gO', 'set-cmd-text :open -t -r {url:pretty}')
config.bind('gU', 'navigate up -t')
config.bind('g^', 'tab-focus 1')
config.bind('ga', 'open -t')
config.bind('gb', 'set-cmd-text -s :bookmark-load')
config.bind('gd', 'download')
config.bind('gf', 'view-source')
config.bind('gg', 'scroll-to-perc 0')
config.bind('gi', 'hint inputs --first')
config.bind('gl', 'tab-move -')
config.bind('gm', 'tab-move')
config.bind('go', 'set-cmd-text :open {url:pretty}')
config.bind('gp', 'tab-pin')
config.bind('gr', 'tab-move +')
config.bind('gt', 'set-cmd-text -s :buffer')
config.bind('gu', 'navigate up')
config.bind('h', 'scroll left')
config.bind('i', 'enter-mode insert')
config.bind('j', 'scroll down')
config.bind('k', 'scroll up')
config.bind('l', 'scroll right')
config.bind('m', 'quickmark-save')
config.bind('n', 'search-next')
config.bind('o', 'set-cmd-text -s :open')
config.bind('pP', 'open -- {primary}')
config.bind('pp', 'open -- {clipboard}')
config.bind('q', 'record-macro')
config.bind('r', 'reload')
config.bind('sf', 'save')
config.bind('sk', 'set-cmd-text -s :bind')
config.bind('sl', 'set-cmd-text -s :set -t')
config.bind('ss', 'set-cmd-text -s :set')
config.bind('tIH', 'config-cycle -p -u *://*.{url:host}/* content.images ;; reload')
config.bind('tIh', 'config-cycle -p -u *://{url:host}/* content.images ;; reload')
config.bind('tIu', 'config-cycle -p -u {url} content.images ;; reload')
config.bind('tPH', 'config-cycle -p -u *://*.{url:host}/* content.plugins ;; reload')
config.bind('tPh', 'config-cycle -p -u *://{url:host}/* content.plugins ;; reload')
config.bind('tPu', 'config-cycle -p -u {url} content.plugins ;; reload')
config.bind('tSH', 'config-cycle -p -u *://*.{url:host}/* content.javascript.enabled ;; reload')
config.bind('tSh', 'config-cycle -p -u *://{url:host}/* content.javascript.enabled ;; reload')
config.bind('tSu', 'config-cycle -p -u {url} content.javascript.enabled ;; reload')
config.bind('th', 'back -t')
config.bind('tiH', 'config-cycle -p -t -u *://*.{url:host}/* content.images ;; reload')
config.bind('tih', 'config-cycle -p -t -u *://{url:host}/* content.images ;; reload')
config.bind('tiu', 'config-cycle -p -t -u {url} content.images ;; reload')
config.bind('tl', 'forward -t')
config.bind('tpH', 'config-cycle -p -t -u *://*.{url:host}/* content.plugins ;; reload')
config.bind('tph', 'config-cycle -p -t -u *://{url:host}/* content.plugins ;; reload')
config.bind('tpu', 'config-cycle -p -t -u {url} content.plugins ;; reload')
config.bind('tsH', 'config-cycle -p -t -u *://*.{url:host}/* content.javascript.enabled ;; reload')
config.bind('tsh', 'config-cycle -p -t -u *://{url:host}/* content.javascript.enabled ;; reload')
config.bind('tsu', 'config-cycle -p -t -u {url} content.javascript.enabled ;; reload')
config.bind('u', 'undo')
config.bind('v', 'enter-mode caret')
config.bind('wB', 'set-cmd-text -s :bookmark-load -w')
config.bind('wO', 'set-cmd-text :open -w {url:pretty}')
config.bind('wP', 'open -w -- {primary}')
config.bind('wb', 'set-cmd-text -s :quickmark-load -w')
config.bind('wf', 'hint all window')
config.bind('wh', 'back -w')
config.bind('wi', 'inspector')
config.bind('wl', 'forward -w')
config.bind('wo', 'set-cmd-text -s :open -w')
config.bind('wp', 'open -w -- {clipboard}')
config.bind('xO', 'set-cmd-text :open -b -r {url:pretty}')
config.bind('xo', 'set-cmd-text -s :open -b')
config.bind('yD', 'yank domain -s')
config.bind('yM', 'yank inline [{title}]({url}) -s')
config.bind('yP', 'yank pretty-url -s')
config.bind('yT', 'yank title -s')
config.bind('yY', 'yank -s')
config.bind('yd', 'yank domain')
config.bind('ym', 'yank inline [{title}]({url})')
config.bind('yp', 'yank pretty-url')
config.bind('yt', 'yank title')
config.bind('yy', 'yank')
config.bind('{{', 'navigate prev -t')
config.bind('}}', 'navigate next -t')

# Bindings for caret mode
config.bind('$', 'move-to-end-of-line', mode='caret')
config.bind('0', 'move-to-start-of-line', mode='caret')
config.bind('<Ctrl+Space>', 'drop-selection', mode='caret')
config.bind('<Ctrl+c>', 'leave-mode', mode='caret')
config.bind('<Escape>', 'leave-mode', mode='caret')
config.bind('<Return>', 'yank selection', mode='caret')
config.bind('<Space>', 'toggle-selection', mode='caret')
config.bind('G', 'move-to-end-of-document', mode='caret')
config.bind('H', 'scroll left', mode='caret')
config.bind('J', 'scroll down', mode='caret')
config.bind('K', 'scroll up', mode='caret')
config.bind('L', 'scroll right', mode='caret')
config.bind('V', 'toggle-selection --line', mode='caret')
config.bind('Y', 'yank selection -s', mode='caret')
config.bind('[', 'move-to-start-of-prev-block', mode='caret')
config.bind(']', 'move-to-start-of-next-block', mode='caret')
config.bind('b', 'move-to-prev-word', mode='caret')
config.bind('c', 'enter-mode normal', mode='caret')
config.bind('e', 'move-to-end-of-word', mode='caret')
config.bind('gg', 'move-to-start-of-document', mode='caret')
config.bind('h', 'move-to-prev-char', mode='caret')
config.bind('j', 'move-to-next-line', mode='caret')
config.bind('k', 'move-to-prev-line', mode='caret')
config.bind('l', 'move-to-next-char', mode='caret')
config.bind('o', 'reverse-selection', mode='caret')
config.bind('v', 'toggle-selection', mode='caret')
config.bind('w', 'move-to-next-word', mode='caret')
config.bind('y', 'yank selection', mode='caret')
config.bind('{', 'move-to-end-of-prev-block', mode='caret')
config.bind('}', 'move-to-end-of-next-block', mode='caret')

# Bindings for command mode
config.bind('<Alt+Backspace>', 'rl-backward-kill-word', mode='command')
config.bind('<Alt+b>', 'rl-backward-word', mode='command')
config.bind('<Alt+d>', 'rl-kill-word', mode='command')
config.bind('<Alt+f>', 'rl-forward-word', mode='command')
config.bind('<Ctrl+?>', 'rl-delete-char', mode='command')
config.bind('<Ctrl+Return>', 'command-accept --rapid', mode='command')
config.bind('<Ctrl+Shift+Tab>', 'completion-item-focus prev-category', mode='command')
config.bind('<Ctrl+Shift+c>', 'completion-item-yank --sel', mode='command')
config.bind('<Ctrl+Tab>', 'completion-item-focus next-category', mode='command')
config.bind('<Ctrl+a>', 'rl-beginning-of-line', mode='command')
config.bind('<Ctrl+b>', 'rl-backward-char', mode='command')
config.bind('<Ctrl+c>', 'leave-mode', mode='command')
config.bind('<Ctrl+d>', 'completion-item-del', mode='command')
config.bind('<Ctrl+e>', 'rl-end-of-line', mode='command')
config.bind('<Ctrl+f>', 'rl-forward-char', mode='command')
config.bind('<Ctrl+h>', 'rl-backward-delete-char', mode='command')
config.bind('<Ctrl+k>', 'rl-kill-line', mode='command')
config.bind('<Ctrl+n>', 'command-history-next', mode='command')
config.bind('<Ctrl+p>', 'command-history-prev', mode='command')
config.bind('<Ctrl+u>', 'rl-unix-line-discard', mode='command')
config.bind('<Ctrl+w>', 'rl-unix-word-rubout', mode='command')
config.bind('<Ctrl+y>', 'rl-yank', mode='command')
config.bind('<Down>', 'completion-item-focus --history next', mode='command')
config.bind('<Escape>', 'leave-mode', mode='command')
config.bind('<Return>', 'command-accept', mode='command')
config.bind('<Shift+Del>', 'completion-item-del', mode='command')
config.bind('<Shift+Tab>', 'completion-item-focus prev', mode='command')
config.bind('<Tab>', 'completion-item-focus next', mode='command')
config.bind('<Up>', 'completion-item-focus --history prev', mode='command')

# Bindings for hint mode
config.bind('<Ctrl+b>', 'hint all tab-bg', mode='hint')
config.bind('<Ctrl+c>', 'leave-mode', mode='hint')
config.bind('<Ctrl+f>', 'hint links', mode='hint')
config.bind('<Ctrl+r>', 'hint --rapid links tab-bg', mode='hint')
config.bind('<Escape>', 'leave-mode', mode='hint')
config.bind('<Return>', 'follow-hint', mode='hint')

# Bindings for insert mode
config.bind('<Ctrl+c>', 'leave-mode', mode='insert')
config.bind('<Ctrl+e>', 'open-editor', mode='insert')
config.bind('<Escape>', 'leave-mode', mode='insert')
config.bind('<Shift+Ins>', 'insert-text -- {primary}', mode='insert')

# Bindings for passthrough mode
config.bind('<Shift+Escape>', 'leave-mode', mode='passthrough')

# Bindings for prompt mode
config.bind('<Alt+Backspace>', 'rl-backward-kill-word', mode='prompt')
config.bind('<Alt+Shift+y>', 'prompt-yank --sel', mode='prompt')
config.bind('<Alt+b>', 'rl-backward-word', mode='prompt')
config.bind('<Alt+d>', 'rl-kill-word', mode='prompt')
config.bind('<Alt+f>', 'rl-forward-word', mode='prompt')
config.bind('<Alt+y>', 'prompt-yank', mode='prompt')
config.bind('<Ctrl+?>', 'rl-delete-char', mode='prompt')
config.bind('<Ctrl+a>', 'rl-beginning-of-line', mode='prompt')
config.bind('<Ctrl+b>', 'rl-backward-char', mode='prompt')
config.bind('<Ctrl+e>', 'rl-end-of-line', mode='prompt')
config.bind('<Ctrl+f>', 'rl-forward-char', mode='prompt')
config.bind('<Ctrl+h>', 'rl-backward-delete-char', mode='prompt')
config.bind('<Ctrl+k>', 'rl-kill-line', mode='prompt')
config.bind('<Ctrl+p>', 'prompt-open-download --pdfjs', mode='prompt')
config.bind('<Ctrl+u>', 'rl-unix-line-discard', mode='prompt')
config.bind('<Ctrl+w>', 'rl-unix-word-rubout', mode='prompt')
config.bind('<Ctrl+x>', 'prompt-open-download', mode='prompt')
config.bind('<Ctrl+y>', 'rl-yank', mode='prompt')
config.bind('<Down>', 'prompt-item-focus next', mode='prompt')
config.bind('<Escape>', 'leave-mode', mode='prompt')
config.bind('<Return>', 'prompt-accept', mode='prompt')
config.bind('<Shift+Tab>', 'prompt-item-focus prev', mode='prompt')
config.bind('<Tab>', 'prompt-item-focus next', mode='prompt')
config.bind('<Up>', 'prompt-item-focus prev', mode='prompt')

# Bindings for register mode
config.bind('<Escape>', 'leave-mode', mode='register')

# Bindings for yesno mode
config.bind('<Alt+Shift+y>', 'prompt-yank --sel', mode='yesno')
config.bind('<Alt+y>', 'prompt-yank', mode='yesno')
config.bind('<Escape>', 'leave-mode', mode='yesno')
config.bind('<Return>', 'prompt-accept', mode='yesno')
config.bind('N', 'prompt-accept --save no', mode='yesno')
config.bind('Y', 'prompt-accept --save yes', mode='yesno')
config.bind('n', 'prompt-accept no', mode='yesno')
config.bind('y', 'prompt-accept yes', mode='yesno')
